<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LaunchUrlToolTip" xml:space="preserve">
    <value>Specifies the URL to open in the browser.  If unspecified http://localhost:port is used.\r\nIf a port is specified, it needs to be specified here as well.</value>
  </data>
  <data name="NodeExeArguments" xml:space="preserve">
    <value>Arguments to Node.exe</value>
  </data>
  <data name="NodeExeArgumentsDescription" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExeArgumentsToolTip" xml:space="preserve">
    <value>Specifies the options provided to node.exe, such as -e or -i.</value>
  </data>
  <data name="NodeExePath" xml:space="preserve">
    <value>Node.exe path</value>
  </data>
  <data name="NodeExePathToolTip" xml:space="preserve">
    <value>Specifies the path to the node.exe executable.</value>
  </data>
  <data name="NodejsPort" xml:space="preserve">
    <value>Node.js Port</value>
  </data>
  <data name="NodejsNotInstalled" xml:space="preserve">
    <value>Node.js does not appear to be installed.  Please download and install Node.js or specify the location of node.exe on the Project | Properties page.</value>
  </data>
  <data name="NodejsPortToolTip" xml:space="preserve">
    <value>Specifies the port number used for process.env.port, if unspecified a random port is generated.</value>
  </data>
  <data name="NpmPackageName" xml:space="preserve">
    <value>Package Name</value>
  </data>
  <data name="NpmPackageNameDescription" xml:space="preserve">
    <value>Name of package, as specified in its package.json.</value>
  </data>
  <data name="NpmPackageVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="NpmPackageVersionDescription" xml:space="preserve">
    <value>Installed version of package.</value>
  </data>
  <data name="NpmPackageRequestedVersionRange" xml:space="preserve">
    <value>Requested Version</value>
  </data>
  <data name="NpmPackageRequestedVersionRangeDescription" xml:space="preserve">
    <value>Version of package requested in package.json belonging to parent package or project.</value>
  </data>
  <data name="NpmPackageNewVersionAvailable" xml:space="preserve">
    <value>Newer Version Available</value>
  </data>
  <data name="NpmPackageNewVersionAvailableDescription" xml:space="preserve">
    <value>Indicates whether or not a newer version of the package is available.</value>
  </data>
  <data name="NpmPackageDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="NpmPackageDescriptionDescription" xml:space="preserve">
    <value>Package description.</value>
  </data>
  <data name="NpmPackageKeywords" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="NpmPackageKeywordsDescription" xml:space="preserve">
    <value>Package keywords.</value>
  </data>
  <data name="NpmPackageAuthor" xml:space="preserve">
    <value>Author</value>
  </data>
  <data name="NpmPackageAuthorDescription" xml:space="preserve">
    <value>Primary or original author of package; there may also be additional contributors.</value>
  </data>
  <data name="NpmPackagePath" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="NpmPackagePathDescription" xml:space="preserve">
    <value>Location of package on disk.</value>
  </data>
  <data name="NpmPackageType" xml:space="preserve">
    <value>Package Type</value>
  </data>
  <data name="NpmPackageTypeDescription" xml:space="preserve">
    <value>Indicates whether package is global, or locally installed in your project, and whether or not it is a sub-package.</value>
  </data>
  <data name="NpmPackageLinkStatus" xml:space="preserve">
    <value>Link Status</value>
  </data>
  <data name="NpmPackageLinkStatusDescription" xml:space="preserve">
    <value>Indicates whether a package has been linked from globally installed packages.</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJson" xml:space="preserve">
    <value>Listed As Dependency</value>
  </data>
  <data name="NpmPackageIsListedInParentPackageJsonDescription" xml:space="preserve">
    <value>Indicates whether or not the package is listed as a package.json dependency.</value>
  </data>
  <data name="NpmPackageIsMissing" xml:space="preserve">
    <value>Missing</value>
  </data>
  <data name="NpmPackageIsMissingDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a missing dependency.</value>
  </data>
  <data name="NpmPackageIsDevDependency" xml:space="preserve">
    <value>Dev Dependency</value>
  </data>
  <data name="NpmPackageIsDevDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a development dependency.</value>
  </data>
  <data name="NpmPackageIsOptionalDependency" xml:space="preserve">
    <value>Optional Dependency</value>
  </data>
  <data name="NpmPackageIsOptionalDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is an optional dependency.</value>
  </data>
  <data name="NpmPackageIsBundledDependency" xml:space="preserve">
    <value>Bundled Dependency</value>
  </data>
  <data name="NpmPackageIsBundledDependencyDescription" xml:space="preserve">
    <value>Indicates whether or not the package is a bundled dependency.</value>
  </data>
  <data name="CategoryVersion" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="CategoryStatus" xml:space="preserve">
    <value>Status</value>
  </data>
  <data name="PackageTypeLocal" xml:space="preserve">
    <value>Local</value>
  </data>
  <data name="PackageTypeLocalSubpackage" xml:space="preserve">
    <value>Local sub-package</value>
  </data>
  <data name="PackageTypeGlobal" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="PackageTypeGlobalSubpackage" xml:space="preserve">
    <value>Global sub-package</value>
  </data>
  <data name="LinkStatusLocallyInstalled" xml:space="preserve">
    <value>Installed locally</value>
  </data>
  <data name="LinkStatusLinkedFromGlobal" xml:space="preserve">
    <value>Installed locally or linked from global packages</value>
  </data>
  <data name="LinkStatusNotLinkedToProject" xml:space="preserve">
    <value>Not linked to project</value>
  </data>
  <data name="LinkStatusLinkedToProject" xml:space="preserve">
    <value>Linked or installed into project</value>
  </data>
  <data name="LinkStatusNotApplicableSubPackages" xml:space="preserve">
    <value>Not applicable for sub-packages.</value>
  </data>
  <data name="LinkStatusUnknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="NewVersionNotApplicableSubpackage" xml:space="preserve">
    <value>Not applicable for sub-packages</value>
  </data>
  <data name="NewVersionUnknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="NewVersionPackageCatalogNotRetrieved" xml:space="preserve">
    <value>Package catalog not yet retrieved</value>
  </data>
  <data name="NewVersionYes" xml:space="preserve">
    <value>Yes: {0}</value>
  </data>
  <data name="NewVersionNo" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="RequestedVersionRangeNone" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="NpmNodePackageInstallation" xml:space="preserve">
    <value>Package Installations</value>
  </data>
  <data name="NpmNodePackageInstallationDescription" xml:space="preserve">
    <value>Indicates whether the node manages local or global npm package installations.</value>
  </data>
  <data name="NpmNodePath" xml:space="preserve">
    <value>Path</value>
  </data>
  <data name="NpmNodePathDescription" xml:space="preserve">
    <value>Base path in which npm packages are installed.</value>
  </data>
  <data name="PackageInstallationGlobal" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="PackageInstallationLocal" xml:space="preserve">
    <value>Local</value>
  </data>
  <data name="PropertiesClassLocalPackage" xml:space="preserve">
    <value>Local Package Properties</value>
  </data>
  <data name="PropertiesClassGlobalPackage" xml:space="preserve">
    <value>Global Package Properties</value>
  </data>
  <data name="PropertiesClassLocalSubPackage" xml:space="preserve">
    <value>Local Sub-Package Properties</value>
  </data>
  <data name="PropertiesClassGlobalSubPackage" xml:space="preserve">
    <value>Global Sub-Package Properties</value>
  </data>
  <data name="PropertiesClassNpm" xml:space="preserve">
    <value>npm Packages Properties</value>
  </data>
  <data name="PropertiesClassGlobal" xml:space="preserve">
    <value>Global npm Packages Properties</value>
  </data>
  <data name="ScriptArgumentsToolTip" xml:space="preserve">
    <value>Specifies the arguments passed to the script on launch.</value>
  </data>
  <data name="ScriptFileTooltip" xml:space="preserve">
    <value>Specifies the script run on launch.</value>
  </data>
  <data name="StartBrowserToolTip" xml:space="preserve">
    <value>When checked a web browser is opened on launch</value>
  </data>
  <data name="WorkingDirToolTip" xml:space="preserve">
    <value>Specifies the working directory where the node.exe process is launched.</value>
  </data>
  <data name="NodeExeDoesntExist" xml:space="preserve">
    <value>Your project is currently configured to look for Node.exe at "{0}" but the file does not exist.</value>
  </data>
  <data name="NodejsToolsForVisualStudio" xml:space="preserve">
    <value>Node.js Tools for Visual Studio</value>
  </data>
  <data name="NodeExePathNotFound" xml:space="preserve">
    <value>The specified Node.js interpreter does not exist.</value>
  </data>
  <data name="NodejsNotInstalledShort" xml:space="preserve">
    <value>Node.js has not been detected on your computer</value>
    <comment>Used in general property page when Node.exe isn't found</comment>
  </data>
  <data name="InvalidPortNumber" xml:space="preserve">
    <value>Invalid port number - the port should contain only digits.</value>
  </data>
  <data name="WorkingDirInvalidOrMissing" xml:space="preserve">
    <value>The specified working directory is invalid or missing.</value>
  </data>
  <data name="CatalogLoadingDefault" xml:space="preserve">
    <value>Loading published package list...</value>
  </data>
  <data name="CatalogLoadingNoNpm" xml:space="preserve">
    <value>Catalog retrieval aborted - npm.cmd not found</value>
  </data>
  <data name="NoKeywordsInPackage" xml:space="preserve">
    <value>(This package has no keywords.)</value>
  </data>
  <data name="PackageCatalogRefreshing" xml:space="preserve">
    <value>Currently refreshing</value>
  </data>
  <data name="PackageCatalogRefresh0Days" xml:space="preserve">
    <value>Today at {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh1Day" xml:space="preserve">
    <value>Yesterday at {0:t}</value>
  </data>
  <data name="PackageCatalogRefresh2To7Days" xml:space="preserve">
    <value>{0} days ago</value>
  </data>
  <data name="PackageCatalogRefresh1Week" xml:space="preserve">
    <value>More than 1 week ago</value>
  </data>
  <data name="PackageCatalogRefresh2Weeks" xml:space="preserve">
    <value>More than 2 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh3Weeks" xml:space="preserve">
    <value>More than 3 weeks ago</value>
  </data>
  <data name="PackageCatalogRefresh1Month" xml:space="preserve">
    <value>More than 1 month ago</value>
  </data>
  <data name="PackageCatalogRefresh3Months" xml:space="preserve">
    <value>More than 3 months ago</value>
  </data>
  <data name="PackageCatalogRefresh6Months" xml:space="preserve">
    <value>Far too long ago</value>
  </data>
  <data name="PackageCount" xml:space="preserve">
    <value> - info for {0} packages retrieved</value>
  </data>
  <data name="PackageMatchCount" xml:space="preserve">
    <value> - {0} matching packages</value>
  </data>
  <data name="PackageInstalledLocally" xml:space="preserve">
    <value>Installed locally</value>
  </data>
  <data name="PackageInstalledLocallyOldVersion" xml:space="preserve">
    <value>Old version {0} installed locally</value>
  </data>
  <data name="PackageInstalledGlobally" xml:space="preserve">
    <value>Installed globally</value>
  </data>
  <data name="PackageInstalledGloballyOldVersion" xml:space="preserve">
    <value>Old version {0} installed globally</value>
  </data>
  <data name="NpmCancelledWithErrors" xml:space="preserve">
    <value>{0} cancelled with errors - see Output window for details</value>
  </data>
  <data name="NpmCompletedWithErrors" xml:space="preserve">
    <value>{0} completed with errors - see Output window for details</value>
  </data>
  <data name="NpmCancelled" xml:space="preserve">
    <value>{0} cancelled</value>
  </data>
  <data name="NpmSuccessfullyCompleted" xml:space="preserve">
    <value>{0} successfully completed</value>
  </data>
  <data name="NpmStatusReady" xml:space="preserve">
    <value>Ready</value>
  </data>
  <data name="NpmStatusReadyWithErrors" xml:space="preserve">
    <value>Ready - Command(s) completed with errors ({0})</value>
  </data>
  <data name="NpmStatusExecuting" xml:space="preserve">
    <value>Executing: {0}</value>
  </data>
  <data name="NpmStatusExecutingQueued" xml:space="preserve">
    <value>Executing: {0} ({1} command(s) queued)</value>
  </data>
  <data name="NpmStatusExecutingErrors" xml:space="preserve">
    <value>Errors Encountered ({1}) - Executing: {0}</value>
  </data>
  <data name="NpmStatusExecutingQueuedErrors" xml:space="preserve">
    <value>Errors Encountered ({2}) - Executing: {0} ({1} command(s) queued)</value>
  </data>
  <data name="TestFramework" xml:space="preserve">
    <value>Test Framework</value>
  </data>
  <data name="TestFrameworkDescription" xml:space="preserve">
    <value>Specifies the test framework this file applies to.</value>
  </data>
  <data name="DebuggerPort" xml:space="preserve">
    <value>Specifies the port used to communicate with the debugger</value>
  </data>
  <data name="EnvironmentVariables" xml:space="preserve">
    <value>Specifies environment variables to be set in the spawned process in the form:

NAME1=value1
NAME2=value2
...</value>
  </data>
  <data name="DebuggerConnectionClosed" xml:space="preserve">
    <value>Debugger connection was closed.</value>
  </data>
  <data name="DebuggerModuleUpdateFailed" xml:space="preserve">
    <value>Failed to update file contents.</value>
  </data>
  <data name="NodejsNotSupported" xml:space="preserve">
    <value>This version of Node.js ({0}) is not supported. Please upgrade to Node.js v0.10.20 or later.</value>
  </data>
  <data name="PackageCatalogRefreshFailed" xml:space="preserve">
    <value>Refresh failed - see output below for details</value>
  </data>
  <data name="ReplInitializationMessage" xml:space="preserve">
    <value>Node.js interactive window. Type .help for a list of commands.</value>
  </data>
  <data name="NodeExePathDescription" xml:space="preserve">
    <value>Specifies the path to the node.exe executable.</value>
  </data>
  <data name="NodejsPortDescription" xml:space="preserve">
    <value>Specifies the port number used for process.env.port, if unspecified a random port is generated.</value>
  </data>
  <data name="NpmOutputPaneTitle" xml:space="preserve">
    <value>Npm</value>
  </data>
  <data name="NpmPackageInstallHelpMessage" xml:space="preserve">
    <value>(enter arguments above)</value>
  </data>
  <data name="NpmReplCommandCompletedWithErrors" xml:space="preserve">
    <value>{0} completed with errors</value>
  </data>
  <data name="LongPathWarningTitle" xml:space="preserve">
    <value>Path Too Long Warning</value>
  </data>
  <data name="LongPathWarningText" xml:space="preserve">
    <value>Your project folder contains one or more paths that exceed the &lt;a href="#msdn"&gt;260 character limit&lt;/a&gt;. Visual Studio &lt;a href="#uservoice"&gt;does not fully support&lt;/a&gt; such projects. You may run into issues building and publishing your project, or interference with other Visual Studio and Node.js Tools features.</value>
  </data>
  <data name="LongPathShowPathsExceedingTheLimit" xml:space="preserve">
    <value>Show &amp;paths exceeding the limit</value>
  </data>
  <data name="LongPathHidePathsExceedingTheLimit" xml:space="preserve">
    <value>Hide &amp;paths exceeding the limit</value>
  </data>
  <data name="LongPathNpmDedupe" xml:space="preserve">
    <value>Run 'npm &amp;dedupe' on the project</value>
  </data>
  <data name="LongPathNpmDedupeDetail" xml:space="preserve">
    <value>In some cases, deduplicating packages can reduce the amount of nesting in node_modules sufficiently to resolve the issue.</value>
  </data>
  <data name="LongPathDoNothingButWarnNextTime" xml:space="preserve">
    <value>Do nothing, but &amp;warn me next time it happens</value>
  </data>
  <data name="LongPathDoNothingAndDoNotWarnAgain" xml:space="preserve">
    <value>Do nothing and &amp;never warn me again</value>
  </data>
  <data name="LongPathDoNothingAndDoNotWarnAgainDetail" xml:space="preserve">
    <value>You can re-enable the check in Tools → Options → Node.js Tools → General.</value>
  </data>
  <data name="LongPathFooter" xml:space="preserve">
    <value>&lt;a href="#help"&gt;Get more information&lt;/a&gt;</value>
  </data>
  <data name="LongPathClickToCopy" xml:space="preserve">
    <value>Copy Full Path</value>
  </data>
  <data name="LongPathNpmDedupeDidNotHelp" xml:space="preserve">
    <value>Unfortunately, running 'npm dedupe' did not resolve the issue. Please consult the &lt;a href="#help"&gt;documentation&lt;/a&gt; for other potential workarounds.</value>
  </data>
  <data name="StatusAnalysisSaved" xml:space="preserve">
    <value>Node.js analysis saved to disk</value>
  </data>
  <data name="StatusAnalysisSaving" xml:space="preserve">
    <value>Saving Node.js analysis to disk...</value>
  </data>
  <data name="StatusAnalysisLoaded" xml:space="preserve">
    <value>Cached Node.js analysis loaded.</value>
  </data>
  <data name="StatusAnalysisLoadFailed" xml:space="preserve">
    <value>Loading cached Node.js analysis failed.</value>
  </data>
  <data name="StatusAnalysisLoading" xml:space="preserve">
    <value>Loading cached Node.js analysis for project...</value>
  </data>
  <data name="AzureToolsInstallInstructions" xml:space="preserve">
    <value>These tools are a free download for your version of Visual Studio that allow you to write, deploy and debug applications for Microsoft Azure in a range of programming languages.</value>
  </data>
  <data name="AzureToolsRequired" xml:space="preserve">
    <value>This project requires Microsoft Azure Tools for Visual Studio.</value>
  </data>
  <data name="AzureToolsUpgradeInstructions" xml:space="preserve">
    <value>Your project can still be created, but some manual configuration of your project will be required and features may be missing or limited.

We recommend installing the latest version of Microsoft Azure Tools for Visual Studio.</value>
  </data>
  <data name="AzureToolsUpgradeRecommended" xml:space="preserve">
    <value>Your version of Microsoft Azure Tools is not supported by Node.js Tools for Visual Studio.</value>
  </data>
  <data name="ContinueWithoutAzureToolsUpgrade" xml:space="preserve">
    <value>&amp;Continue
Some manual steps will be required to configure your project.</value>
  </data>
  <data name="DontShowAgain" xml:space="preserve">
    <value>Do not show this warning again.</value>
  </data>
  <data name="DownloadAndInstall" xml:space="preserve">
    <value>&amp;Download and install now
You will need to restart Visual Studio after installation.</value>
  </data>
  <data name="ErrorNoDte" xml:space="preserve">
    <value>Unable to start wizard: no automation object available.</value>
  </data>
  <data name="UpgradedEnvironmentVariables" xml:space="preserve">
    <value>Replaced &lt;EnvironmentVariables&gt; property with &lt;Environment&gt;. This project will no longer work with NTVS 1.0 beta 2 or below.</value>
  </data>
  <data name="Milliseconds" xml:space="preserve">
    <value>milliseconds</value>
  </data>
  <data name="Seconds" xml:space="preserve">
    <value>seconds</value>
  </data>
  <data name="StatusAnalysisUpToDate" xml:space="preserve">
    <value>Node.js code analysis is up to date, analyzed {0:N0} function(s) in {1}</value>
  </data>
  <data name="IncludeNodeModulesCancelTitle" xml:space="preserve">
    <value>Do nothing (recommended)</value>
  </data>
  <data name="IncludeNodeModulesContent" xml:space="preserve">
    <value>Including 'node_modules' in your project is generally unnecessary, and may reduce Visual Studio's performance. You can continue to use and deploy packages from 'node_modules' without including it in your project.</value>
  </data>
  <data name="IncludeNodeModulesIncludeDescription" xml:space="preserve">
    <value>This may be a long-running operation, during which Visual Studio will be unusable.</value>
  </data>
  <data name="IncludeNodeModulesIncludeTitle" xml:space="preserve">
    <value>Include 'node_modules' folder in project</value>
  </data>
  <data name="IncludeNodeModulesInformation" xml:space="preserve">
    <value>&lt;a href="http://go.microsoft.com/fwlink/?LinkID=518083"&gt;More Information&lt;/a&gt;</value>
  </data>
  <data name="InsertSnippet" xml:space="preserve">
    <value>Insert Snippet</value>
  </data>
  <data name="SurroundWith" xml:space="preserve">
    <value>Surround With</value>
  </data>
</root>